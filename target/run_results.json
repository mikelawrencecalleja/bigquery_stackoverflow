{"logs": [], "results": [{"node": {"raw_sql": "--This model shows the highest scoring answers, grouped by who posted the answer, what the parent query was, and the tag\r\n{{\r\n    config(\r\n        materialized='table'\r\n    )\r\n}}\r\n\r\nwith answer_volume as (select DISTINCT \r\nowner_user_id,\r\nparent_id,\r\nMAX (score) AS max_score\r\nFROM bigquery-public-data.stackoverflow.posts_answers\r\nwhere last_editor_user_id >0\r\nAND creation_date > '2008-01-01T00:00:00+00:00'\r\nGROUP BY owner_user_id,parent_id\r\nORDER BY max_score DESC\r\n),\r\n\r\ntags as (\r\n    select * from `bigquery-public-data.stackoverflow.posts_questions`\r\n),\r\n\r\njoined as (\r\n    SELECT DISTINCT \r\n    t.tags,\r\n    a.owner_user_id,\r\n    a.parent_id,\r\n    a.max_score,\r\n    FROM answer_volume a\r\n    inner join tags t \r\n    on a.parent_id = t.id\r\n    ORDER BY tags ASC\r\n)\r\n\r\nselect * from joined", "database": "precise-ether-284916", "schema": "dbt_mcalleja", "fqn": ["stackoverflow_project", "stackoverflow", "index_query_answers"], "unique_id": "model.stackoverflow_project.index_query_answers", "package_name": "stackoverflow_project", "root_path": "/usr/src/develop/user-7870/environment-9345/repository-8039", "path": "stackoverflow/index_query_answers.sql", "original_file_path": "models/stackoverflow/index_query_answers.sql", "name": "index_query_answers", "resource_type": "model", "alias": "index_query_answers", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/stackoverflow_project/models/stackoverflow/index_query_answers.sql", "compiled": true, "compiled_sql": "--This model shows the highest scoring answers, grouped by who posted the answer, what the parent query was, and the tag\n\n\nwith answer_volume as (select DISTINCT \nowner_user_id,\nparent_id,\nMAX (score) AS max_score\nFROM bigquery-public-data.stackoverflow.posts_answers\nwhere last_editor_user_id >0\nAND creation_date > '2008-01-01T00:00:00+00:00'\nGROUP BY owner_user_id,parent_id\nORDER BY max_score DESC\n),\n\ntags as (\n    select * from `bigquery-public-data.stackoverflow.posts_questions`\n),\n\njoined as (\n    SELECT DISTINCT \n    t.tags,\n    a.owner_user_id,\n    a.parent_id,\n    a.max_score,\n    FROM answer_volume a\n    inner join tags t \n    on a.parent_id = t.id\n    ORDER BY tags ASC\n)\n\nselect * from joined", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--This model shows the highest scoring answers, grouped by who posted the answer, what the parent query was, and the tag\n\n\nwith answer_volume as (select DISTINCT \nowner_user_id,\nparent_id,\nMAX (score) AS max_score\nFROM bigquery-public-data.stackoverflow.posts_answers\nwhere last_editor_user_id >0\nAND creation_date > '2008-01-01T00:00:00+00:00'\nGROUP BY owner_user_id,parent_id\nORDER BY max_score DESC\n),\n\ntags as (\n    select * from `bigquery-public-data.stackoverflow.posts_questions`\n),\n\njoined as (\n    SELECT DISTINCT \n    t.tags,\n    a.owner_user_id,\n    a.parent_id,\n    a.max_score,\n    FROM answer_volume a\n    inner join tags t \n    on a.parent_id = t.id\n    ORDER BY tags ASC\n)\n\nselect * from joined"}, "error": null, "status": "CREATE TABLE (7952180)", "execution_time": 50.44456434249878, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-11T09:19:50.496607Z", "completed_at": "2020-08-11T09:19:50.535953Z"}, {"name": "execute", "started_at": "2020-08-11T09:19:50.536349Z", "completed_at": "2020-08-11T09:20:40.940323Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--This model shows the highest ranked users for the last five years, by upvotes\r\n{{\r\n    config(\r\n        materialized='table'\r\n    )\r\n}}\r\n\r\nSELECT DISTINCT\r\nid,\r\ndisplay_name,\r\nup_votes,\r\nCAST (creation_date AS date) AS active_since_date,\r\nreputation\r\nFROM bigquery-public-data.stackoverflow.users\r\nwhere creation_date > '2008-01-01T00:00:00+00:00'\r\nAND display_name NOT like 'Community'\r\nAND up_votes > 0\r\norder by 3 DESC", "database": "precise-ether-284916", "schema": "dbt_mcalleja", "fqn": ["stackoverflow_project", "stackoverflow", "index_trending_contributors"], "unique_id": "model.stackoverflow_project.index_trending_contributors", "package_name": "stackoverflow_project", "root_path": "/usr/src/develop/user-7870/environment-9345/repository-8039", "path": "stackoverflow/index_trending_contributors.sql", "original_file_path": "models/stackoverflow/index_trending_contributors.sql", "name": "index_trending_contributors", "resource_type": "model", "alias": "index_trending_contributors", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/stackoverflow_project/models/stackoverflow/index_trending_contributors.sql", "compiled": true, "compiled_sql": "--This model shows the highest ranked users for the last five years, by upvotes\n\n\nSELECT DISTINCT\nid,\ndisplay_name,\nup_votes,\nCAST (creation_date AS date) AS active_since_date,\nreputation\nFROM bigquery-public-data.stackoverflow.users\nwhere creation_date > '2008-01-01T00:00:00+00:00'\nAND display_name NOT like 'Community'\nAND up_votes > 0\norder by 3 DESC", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--This model shows the highest ranked users for the last five years, by upvotes\n\n\nSELECT DISTINCT\nid,\ndisplay_name,\nup_votes,\nCAST (creation_date AS date) AS active_since_date,\nreputation\nFROM bigquery-public-data.stackoverflow.users\nwhere creation_date > '2008-01-01T00:00:00+00:00'\nAND display_name NOT like 'Community'\nAND up_votes > 0\norder by 3 DESC"}, "error": null, "status": "CREATE TABLE (1490709)", "execution_time": 11.64406418800354, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-11T09:20:40.944418Z", "completed_at": "2020-08-11T09:20:40.980807Z"}, {"name": "execute", "started_at": "2020-08-11T09:20:40.981136Z", "completed_at": "2020-08-11T09:20:52.587631Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--This model shows an index of the Stack Overflow users, ordered by how many badges they've won this year.\r\n{{\r\n    config(\r\n        materialized='table'\r\n    )\r\n}}\r\n \r\nSELECT DISTINCT \r\nuser_id,\r\nCOUNT (name) AS badge_count\r\nFROM `bigquery-public-data.stackoverflow.badges` \r\nGROUP BY user_id\r\nORDER by 2 DESC", "database": "precise-ether-284916", "schema": "dbt_mcalleja", "fqn": ["stackoverflow_project", "stackoverflow", "index_badges_count"], "unique_id": "model.stackoverflow_project.index_badges_count", "package_name": "stackoverflow_project", "root_path": "/usr/src/develop/user-7870/environment-9345/repository-8039", "path": "stackoverflow/index_badges_count.sql", "original_file_path": "models/stackoverflow/index_badges_count.sql", "name": "index_badges_count", "resource_type": "model", "alias": "index_badges_count", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/stackoverflow_project/models/stackoverflow/index_badges_count.sql", "compiled": true, "compiled_sql": "--This model shows an index of the Stack Overflow users, ordered by how many badges they've won this year.\n\n \nSELECT DISTINCT \nuser_id,\nCOUNT (name) AS badge_count\nFROM `bigquery-public-data.stackoverflow.badges` \nGROUP BY user_id\nORDER by 2 DESC", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--This model shows an index of the Stack Overflow users, ordered by how many badges they've won this year.\n\n \nSELECT DISTINCT \nuser_id,\nCOUNT (name) AS badge_count\nFROM `bigquery-public-data.stackoverflow.badges` \nGROUP BY user_id\nORDER by 2 DESC"}, "error": null, "status": "CREATE TABLE (6108114)", "execution_time": 19.635742664337158, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-11T09:20:52.590964Z", "completed_at": "2020-08-11T09:20:52.622567Z"}, {"name": "execute", "started_at": "2020-08-11T09:20:52.622993Z", "completed_at": "2020-08-11T09:21:12.225828Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--This model shows all queries raised this month. Run this model once as a newly-initialised table, then run it as incremental going forward.\r\n{{\r\n    config(\r\n        materialized='table'\r\n    )\r\n}}\r\n\r\nSELECT DISTINCT \r\n*\r\nFROM `bigquery-public-data.stackoverflow.posts_questions` \r\nwhere tags NOT like '%comments%'\r\nAND creation_date > '2020-03-01T00:00:00+00:00'\r\nORDER BY creation_date DESC", "database": "precise-ether-284916", "schema": "dbt_mcalleja", "fqn": ["stackoverflow_project", "stackoverflow", "index_query"], "unique_id": "model.stackoverflow_project.index_query", "package_name": "stackoverflow_project", "root_path": "/usr/src/develop/user-7870/environment-9345/repository-8039", "path": "stackoverflow/index_query.sql", "original_file_path": "models/stackoverflow/index_query.sql", "name": "index_query", "resource_type": "model", "alias": "index_query", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/stackoverflow_project/models/stackoverflow/index_query.sql", "compiled": true, "compiled_sql": "--This model shows all queries raised this month. Run this model once as a newly-initialised table, then run it as incremental going forward.\n\n\nSELECT DISTINCT \n*\nFROM `bigquery-public-data.stackoverflow.posts_questions` \nwhere tags NOT like '%comments%'\nAND creation_date > '2020-03-01T00:00:00+00:00'\nORDER BY creation_date DESC", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--This model shows all queries raised this month. Run this model once as a newly-initialised table, then run it as incremental going forward.\n\n\nSELECT DISTINCT \n*\nFROM `bigquery-public-data.stackoverflow.posts_questions` \nwhere tags NOT like '%comments%'\nAND creation_date > '2020-03-01T00:00:00+00:00'\nORDER BY creation_date DESC"}, "error": "Database Error in model index_query (models/stackoverflow/index_query.sql)\n  Resources exceeded during query execution: The query could not be executed in the allotted memory.\n  compiled SQL at target/run/stackoverflow_project/models/stackoverflow/index_query.sql", "status": "ERROR", "execution_time": 12.352551460266113, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--This model shows the the user IDs that have achieved the highest scores for their answers, grouped by tags\r\n{{\r\n    config(\r\n        materialized='table'\r\n    )\r\n}}\r\n \r\nselect DISTINCT \r\n    tags,\r\n    owner_user_id AS sme_user_id,\r\n    max_score AS max_score\r\n    FROM {{ ref('index_query_answers')}} a\r\n    INNER JOIN (\r\n    SELECT \r\n    tags AS tags2,\r\n    MAX(max_score) as max_score2\r\n    FROM {{ ref('index_query_answers')}}\r\n    GROUP BY tags\r\n    ) b \r\n    ON a.tags = b.tags2 AND a.max_score = b.max_score2\r\n    WHERE max_score >0\r\n    order by 3 DESC", "database": "precise-ether-284916", "schema": "dbt_mcalleja", "fqn": ["stackoverflow_project", "stackoverflow", "index_subject_matter_experts"], "unique_id": "model.stackoverflow_project.index_subject_matter_experts", "package_name": "stackoverflow_project", "root_path": "/usr/src/develop/user-7870/environment-9345/repository-8039", "path": "stackoverflow/index_subject_matter_experts.sql", "original_file_path": "models/stackoverflow/index_subject_matter_experts.sql", "name": "index_subject_matter_experts", "resource_type": "model", "alias": "index_subject_matter_experts", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["index_query_answers"], ["index_query_answers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.stackoverflow_project.index_query_answers", "model.stackoverflow_project.index_query_answers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/stackoverflow_project/models/stackoverflow/index_subject_matter_experts.sql", "compiled": true, "compiled_sql": "--This model shows the the user IDs that have achieved the highest scores for their answers, grouped by tags\n\n \nselect DISTINCT \n    tags,\n    owner_user_id AS sme_user_id,\n    max_score AS max_score\n    FROM `precise-ether-284916`.`dbt_mcalleja`.`index_query_answers` a\n    INNER JOIN (\n    SELECT \n    tags AS tags2,\n    MAX(max_score) as max_score2\n    FROM `precise-ether-284916`.`dbt_mcalleja`.`index_query_answers`\n    GROUP BY tags\n    ) b \n    ON a.tags = b.tags2 AND a.max_score = b.max_score2\n    WHERE max_score >0\n    order by 3 DESC", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--This model shows the the user IDs that have achieved the highest scores for their answers, grouped by tags\n\n \nselect DISTINCT \n    tags,\n    owner_user_id AS sme_user_id,\n    max_score AS max_score\n    FROM `precise-ether-284916`.`dbt_mcalleja`.`index_query_answers` a\n    INNER JOIN (\n    SELECT \n    tags AS tags2,\n    MAX(max_score) as max_score2\n    FROM `precise-ether-284916`.`dbt_mcalleja`.`index_query_answers`\n    GROUP BY tags\n    ) b \n    ON a.tags = b.tags2 AND a.max_score = b.max_score2\n    WHERE max_score >0\n    order by 3 DESC"}, "error": null, "status": "CREATE TABLE (1988471)", "execution_time": 25.898509979248047, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-11T09:21:24.585506Z", "completed_at": "2020-08-11T09:21:24.623536Z"}, {"name": "execute", "started_at": "2020-08-11T09:21:24.623856Z", "completed_at": "2020-08-11T09:21:50.483095Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--This model splices together contributing user's amount of badges won, with the upvotes they've received.\r\n{{\r\n    config(\r\n        materialized='table'\r\n    )\r\n}}\r\n\r\nwith badges_index as (\r\n\r\n    select * from {{ ref('index_badges_count') }}\r\n),\r\n\r\ntrending_contributors as (\r\n    select * from {{ ref('index_trending_contributors')}}\r\n),\r\n\r\nspecialist_area as (\r\n    select owner_user_id,\r\n    MAX (max_score)\r\n    FROM {{ ref('index_query_answers')}}\r\n    GROUP BY owner_user_id\r\n),\r\n \r\njoined as (\r\n    SELECT DISTINCT t.id,\r\n    t.active_since_date,\r\n    t.display_name,\r\n    t.up_votes,\r\n    t.reputation,\r\n    b.badge_count,\r\n    ((t.up_votes + b.badge_count)/2) AS performance_index\r\n    FROM trending_contributors t\r\n    inner join badges_index b \r\n    on t.id = b.user_id\r\n)\r\n\r\nselect * from joined\r\nwhere display_name NOT LIKE '%user%'\r\nORDER BY 6 DESC", "database": "precise-ether-284916", "schema": "dbt_mcalleja", "fqn": ["stackoverflow_project", "stackoverflow", "index_contributor_scores"], "unique_id": "model.stackoverflow_project.index_contributor_scores", "package_name": "stackoverflow_project", "root_path": "/usr/src/develop/user-7870/environment-9345/repository-8039", "path": "stackoverflow/index_contributor_scores.sql", "original_file_path": "models/stackoverflow/index_contributor_scores.sql", "name": "index_contributor_scores", "resource_type": "model", "alias": "index_contributor_scores", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["index_badges_count"], ["index_trending_contributors"], ["index_query_answers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.stackoverflow_project.index_badges_count", "model.stackoverflow_project.index_trending_contributors", "model.stackoverflow_project.index_query_answers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/stackoverflow_project/models/stackoverflow/index_contributor_scores.sql", "compiled": true, "compiled_sql": "--This model splices together contributing user's amount of badges won, with the upvotes they've received.\n\n\nwith badges_index as (\n\n    select * from `precise-ether-284916`.`dbt_mcalleja`.`index_badges_count`\n),\n\ntrending_contributors as (\n    select * from `precise-ether-284916`.`dbt_mcalleja`.`index_trending_contributors`\n),\n\nspecialist_area as (\n    select owner_user_id,\n    MAX (max_score)\n    FROM `precise-ether-284916`.`dbt_mcalleja`.`index_query_answers`\n    GROUP BY owner_user_id\n),\n \njoined as (\n    SELECT DISTINCT t.id,\n    t.active_since_date,\n    t.display_name,\n    t.up_votes,\n    t.reputation,\n    b.badge_count,\n    ((t.up_votes + b.badge_count)/2) AS performance_index\n    FROM trending_contributors t\n    inner join badges_index b \n    on t.id = b.user_id\n)\n\nselect * from joined\nwhere display_name NOT LIKE '%user%'\nORDER BY 6 DESC", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--This model splices together contributing user's amount of badges won, with the upvotes they've received.\n\n\nwith badges_index as (\n\n    select * from `precise-ether-284916`.`dbt_mcalleja`.`index_badges_count`\n),\n\ntrending_contributors as (\n    select * from `precise-ether-284916`.`dbt_mcalleja`.`index_trending_contributors`\n),\n\nspecialist_area as (\n    select owner_user_id,\n    MAX (max_score)\n    FROM `precise-ether-284916`.`dbt_mcalleja`.`index_query_answers`\n    GROUP BY owner_user_id\n),\n \njoined as (\n    SELECT DISTINCT t.id,\n    t.active_since_date,\n    t.display_name,\n    t.up_votes,\n    t.reputation,\n    b.badge_count,\n    ((t.up_votes + b.badge_count)/2) AS performance_index\n    FROM trending_contributors t\n    inner join badges_index b \n    on t.id = b.user_id\n)\n\nselect * from joined\nwhere display_name NOT LIKE '%user%'\nORDER BY 6 DESC"}, "error": null, "status": "CREATE TABLE (1421756)", "execution_time": 16.0335054397583, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-08-11T09:21:50.486804Z", "completed_at": "2020-08-11T09:21:50.527318Z"}, {"name": "execute", "started_at": "2020-08-11T09:21:50.527586Z", "completed_at": "2020-08-11T09:22:06.519490Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\r\n    config(\r\n        materialized='table'\r\n    )\r\n}}\r\n\r\nwith unanswered_query_type as (\r\n\r\n    select DISTINCT * from {{ ref('index_query') }}\r\n    WHERE community_owned_date IS NULL\r\n    AND creation_date > '2020-05-01T00:00:00+00:00'\r\n\r\n),\r\n\r\nsubject_matter_experts as(\r\n    select DISTINCT * from {{ ref('index_subject_matter_experts')}}\r\n),\r\n\r\ntrending_contributors as(\r\n    select DISTINCT * from {{ ref('index_trending_contributors')}}\r\n),\r\n\r\njoined as (\r\n    SELECT DISTINCT\r\n    u.title,\r\n    u.owner_user_id,\r\n    u.creation_date,\r\n    u.last_activity_date,\r\n    u.answer_count,\r\n    u.tags,\r\n    u.view_count,\r\n    u.accepted_answer_id,\r\n    s.sme_user_id,\r\n    t.display_name,\r\n    t.reputation\r\n    from subject_matter_experts s\r\n    INNER JOIN unanswered_query_type u\r\n    ON u.tags = s.tags\r\n    LEFT OUTER JOIN trending_contributors t\r\n    ON s.sme_user_id = t.id\r\n    \r\n)\r\n\r\nselect * from joined\r\norder by 7 DESC", "database": "precise-ether-284916", "schema": "dbt_mcalleja", "fqn": ["stackoverflow_project", "stackoverflow", "star_table"], "unique_id": "model.stackoverflow_project.star_table", "package_name": "stackoverflow_project", "root_path": "/usr/src/develop/user-7870/environment-9345/repository-8039", "path": "stackoverflow/star_table.sql", "original_file_path": "models/stackoverflow/star_table.sql", "name": "star_table", "resource_type": "model", "alias": "star_table", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["index_query"], ["index_subject_matter_experts"], ["index_trending_contributors"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.stackoverflow_project.index_query", "model.stackoverflow_project.index_subject_matter_experts", "model.stackoverflow_project.index_trending_contributors"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}], "generated_at": "2020-08-11T09:22:06.525370Z", "elapsed_time": 136.49430131912231}